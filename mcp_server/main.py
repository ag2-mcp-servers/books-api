# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:43:55+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity
from fastapi import Query
from pydantic import conint

from models import Format, SortOrder
from models.Lists import FieldFormatGetResponse
from models.Lists_date__list_ import JsonGetResponse
from models.ListsBest_sellersHistory import JsonGetResponse
from models.ListsNames import FieldFormatGetResponse
from models.ListsOverview import FieldFormatGetResponse
from models.Reviews import FieldFormatGetResponse

app = MCPProxy(
    description='The Books API provides information about book reviews and The New York Times bestsellers lists.',
    termsOfService='http://developer.nytimes.com/tou',
    title='Books API',
    version='3.0.0',
    servers=[{'url': 'https://api.nytimes.com/svc/books/v3'}],
)


@app.get(
    '/lists.{format}',
    tags=['bestseller_list_management'],
    security=[
        APIKeyQuery(name="api-key"),
    ],
)
def g_e_t_lists_format(
    list: Optional[str] = None,
    weeks_on_list: Optional[int] = Query(None, alias='weeks-on-list'),
    bestsellers_date: Optional[datetime] = Query(None, alias='bestsellers-date'),
    date: Optional[str] = None,
    isbn: Optional[str] = None,
    published_date: Optional[str] = Query(None, alias='published-date'),
    rank: Optional[int] = None,
    rank_last_week: Optional[int] = Query(None, alias='rank-last-week'),
    offset: Optional[conint(multiple_of=20)] = None,
    sort_order: Optional[SortOrder] = Query(None, alias='sort-order'),
    format: Format = ...,
):
    """
    Best Seller List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lists/best-sellers/history.json',
    tags=['bestseller_list_management'],
    security=[
        APIKeyQuery(name="api-key"),
    ],
)
def g_e_t_lists_best_sellers_history_json(
    age_group: Optional[str] = Query(None, alias='age-group'),
    author: Optional[str] = None,
    contributor: Optional[str] = None,
    isbn: Optional[str] = None,
    price: Optional[str] = None,
    publisher: Optional[str] = None,
    title: Optional[str] = None,
):
    """
    Best Seller History List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lists/names.{format}',
    tags=['bestseller_list_management'],
    security=[
        APIKeyQuery(name="api-key"),
    ],
)
def g_e_t_lists_names_format(
    api_key: Optional[str] = Query(None, alias='api-key'), format: Format = ...
):
    """
    Best Seller List Names
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lists/overview.{format}',
    tags=['bestseller_list_management'],
    security=[
        APIKeyQuery(name="api-key"),
    ],
)
def g_e_t_lists_overview_format(
    published_date: Optional[str] = None,
    api_key: Optional[str] = Query(None, alias='api-key'),
    format: Format = ...,
):
    """
    Best Seller List Overview
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lists/{date}/{list}.json',
    tags=['bestseller_list_management'],
    security=[
        APIKeyQuery(name="api-key"),
    ],
)
def g_e_t_lists_date_list_json(
    isbn: Optional[int] = None,
    list_name: Optional[str] = Query(None, alias='list-name'),
    published_date: Optional[datetime] = Query(None, alias='published-date'),
    bestsellers_date: Optional[str] = Query(None, alias='bestsellers-date'),
    weeks_on_list: Optional[int] = Query(None, alias='weeks-on-list'),
    rank: Optional[str] = None,
    rank_last_week: Optional[int] = Query(None, alias='rank-last-week'),
    offset: Optional[conint(multiple_of=20)] = None,
    sort_order: Optional[SortOrder] = Query(None, alias='sort-order'),
    date: str = ...,
    list: str = ...,
):
    """
    Best Seller List by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reviews.{format}',
    tags=['book_reviews_retrieval'],
    security=[
        APIKeyQuery(name="api-key"),
    ],
)
def g_e_t_reviews_format(
    isbn: Optional[int] = None,
    title: Optional[str] = None,
    author: Optional[str] = None,
    api_key: Optional[str] = Query(None, alias='api-key'),
    format: Format = ...,
):
    """
    Reviews
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
